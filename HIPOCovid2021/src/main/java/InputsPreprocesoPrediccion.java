

import com.ibm.icu.util.Calendar;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.StringWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author pmateo
 */
public class InputsPreprocesoPrediccion extends javax.swing.JDialog {
    private String dataDirectory;
    private String lastDirectoryVisited;
    private String nombreFicheroPrevio;
    private String newOwnPositivesFile;
    private final JTextArea salidaTexto;
    private final ScriptEngineManager factory;
    private final ScriptEngine engine;
    private final StringWriter outputWriter;
    private final PantallaPrincipalA ppa;
    private final String ficheros[];
    private final JButton resTextoButon;
    private final JButton resGraphicButon;
    private final JButton resTextoButon2;
    private final JButton resGraphicButon2;
    private Date tMin;
    private Date tMax;
    private boolean ficheroDatosDisponible;
    private boolean usarFicheroNewPosPropio=false;
    private int lineasNewPosPropio=0;
    private boolean usarDirectorioTemporales=true;
    private boolean custom_scenario_simple=false;
    private ResourceBundle bundle;
    private int[] numClasesG2={-1};
    private boolean auxb=true;
    
    /**
     * Creates new form InputsPreproceso
     * @param parent
     * @param modal
     * @param DD
     * @param LD
     * @param nfa
     * @param jta
     * @param fichs
     */
    public InputsPreprocesoPrediccion(java.awt.Frame parent, boolean modal,String DD,String LD,String nfa,JTextArea jta, String fichs[],JButton jBResText, JButton jBResGrf,JButton jBResText2, JButton jBResGrf2,ResourceBundle bndl) {
        super(parent, modal);       
        ppa =(PantallaPrincipalA)parent;
        File f;
        bundle = bndl;
        initComponents();
        dataDirectory=DD;
        lastDirectoryVisited=LD;
        nombreFicheroPrevio=nfa;
        ficheros=fichs;
        resTextoButon=jBResText;
        resGraphicButon=jBResGrf;
        resTextoButon2=jBResText2;
        resGraphicButon2=jBResGrf2;
        
        if(nfa!=null){
            f= new File(nombreFicheroPrevio);
            if(f.exists())
                nombreFicheroJTF.setText(nombreFicheroPrevio);
            else
                nombreFicheroJTF.setText("");
        }
        else
            nombreFicheroJTF.setText("");
        salidaTexto=jta;
        factory = new ScriptEngineManager();
        // create a Renjin engine
        engine = factory.getEngineByName("Renjin");
        outputWriter = new StringWriter();
        engine.getContext().setWriter(outputWriter);
        ficheroDatosDisponible=false;
        usarFicheroNewPosPropio=false;
        FicheroNewPositivos.setVisible(false);
        seleccionarFicheroNewPositivos.setVisible(false);
        cargarFicheroNewPositivos.setVisible(false);
        numClasesG2[0]= -1;
    }

   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        nombreFicheroJTF = new javax.swing.JTextField();
        cargarFicheroDatos = new javax.swing.JButton();
        jDateChooser_t_I = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        seleccionarFicheroDatos = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jDateChooser_t_F = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        fechaIni = new javax.swing.JTextField();
        fechaFin = new javax.swing.JTextField();
        procesar2 = new javax.swing.JButton();
        cancelar2 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jDateChooser_t_0 = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        jDateChooser_t_1 = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();
        semillaJTF = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        numRepJTF = new javax.swing.JTextField();
        positivosExterno = new javax.swing.JCheckBox();
        FicheroNewPositivos = new javax.swing.JTextField();
        seleccionarFicheroNewPositivos = new javax.swing.JButton();
        cargarFicheroNewPositivos = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(bundle.getString("prediccion.pantalla.title"));
        setModal(true);
        setResizable(false);

        jLabel1.setText(bundle.getString("prediccion.pantalla.label.ficherodatos")
        );

        nombreFicheroJTF.setToolTipText("Fichero de datos para estimar parámetros del modelo");

        cargarFicheroDatos.setText(bundle.getString("prediccion.pantalla.button.cargar"));
        cargarFicheroDatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarFicheroDatosActionPerformed(evt);
            }
        });

        jDateChooser_t_I.setDateFormatString("yyyy-MM-dd");
        jDateChooser_t_I.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDateChooser_t_IPropertyChange(evt);
            }
        });

        jLabel2.setText(bundle.getString("prediccion.pantalla.label.periodoestimacion"));

        seleccionarFicheroDatos.setText(bundle.getString("prediccion.pantalla.button.seleccionar"));
        seleccionarFicheroDatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionarFicheroDatosActionPerformed(evt);
            }
        });

        jLabel3.setText(bundle.getString("prediccion.pantalla.label.to"));

        jDateChooser_t_F.setDateFormatString("yyyy-MM-dd");
        jDateChooser_t_F.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDateChooser_t_FPropertyChange(evt);
            }
        });

        jLabel4.setText(bundle.getString("prediccion.pantalla.label.periodofichero"));

        jLabel5.setText(bundle.getString("prediccion.pantalla.label.to"));

        fechaIni.setEditable(false);

        fechaFin.setEditable(false);

        procesar2.setText(bundle.getString("prediccion.pantalla.button.procesar"));
        procesar2.setEnabled(false);
        procesar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                procesar2ActionPerformed(evt);
            }
        });

        cancelar2.setText(bundle.getString("prediccion.pantalla.button.cancelar"));
        cancelar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelar2ActionPerformed(evt);
            }
        });

        jLabel6.setText(bundle.getString("prediccion.pantalla.label.periodoprediccion"));

        jDateChooser_t_0.setDateFormatString("yyyy-MM-dd");
        jDateChooser_t_0.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDateChooser_t_0PropertyChange(evt);
            }
        });

        jLabel7.setText(bundle.getString("prediccion.pantalla.label.to"));

        jDateChooser_t_1.setDateFormatString("yyyy-MM-dd");
        jDateChooser_t_1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDateChooser_t_1PropertyChange(evt);
            }
        });

        jLabel8.setText(bundle.getString("prediccion.pantalla.label.semilla"));

        semillaJTF.setText("987654");

        jLabel9.setText(bundle.getString("prediccion.pantalla.label.numeroreplicas"));

        numRepJTF.setText("500");

        positivosExterno.setText(bundle.getString("prediccion.pantalla.checkbox.ficheropropio"));
        positivosExterno.setToolTipText("Si no se selecciona el modelo realizará una predicción de los nuevos contagios en el periodo indicado.");
        positivosExterno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                positivosExternoActionPerformed(evt);
            }
        });

        FicheroNewPositivos.setEnabled(false);

        seleccionarFicheroNewPositivos.setText(bundle.getString("prediccion.pantalla.button.seleccionar"));
        seleccionarFicheroNewPositivos.setEnabled(false);
        seleccionarFicheroNewPositivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionarFicheroNewPositivosActionPerformed(evt);
            }
        });

        cargarFicheroNewPositivos.setText(bundle.getString("prediccion.pantalla.button.cargar"));
        cargarFicheroNewPositivos.setEnabled(false);
        cargarFicheroNewPositivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarFicheroNewPositivosActionPerformed(evt);
            }
        });

        jButton1.setText(bundle.getString("general.button.ayuda"));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(14, 14, 14)
                                .addComponent(fechaIni, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(fechaFin))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nombreFicheroJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(seleccionarFicheroDatos, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(17, 17, 17)
                                .addComponent(cargarFicheroDatos, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(FicheroNewPositivos, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17)
                        .addComponent(seleccionarFicheroNewPositivos, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17)
                        .addComponent(cargarFicheroNewPositivos, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(positivosExterno))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(88, 88, 88)
                                .addComponent(jDateChooser_t_0, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(jDateChooser_t_1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(26, 26, 26)
                                .addComponent(jDateChooser_t_I, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDateChooser_t_F, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(15, 15, 15)
                                .addComponent(semillaJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)
                                .addComponent(jLabel9)
                                .addGap(15, 15, 15)
                                .addComponent(numRepJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(procesar2)
                                .addGap(18, 18, 18)
                                .addComponent(cancelar2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(nombreFicheroJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cargarFicheroDatos)
                    .addComponent(seleccionarFicheroDatos))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(fechaIni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fechaFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jDateChooser_t_I, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDateChooser_t_F, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(18, 18, 18)
                .addComponent(positivosExterno)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FicheroNewPositivos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(seleccionarFicheroNewPositivos)
                    .addComponent(cargarFicheroNewPositivos))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel7)
                    .addComponent(jDateChooser_t_1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jDateChooser_t_0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(semillaJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(numRepJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(procesar2)
                    .addComponent(cancelar2)
                    .addComponent(jButton1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cargarFicheroDatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarFicheroDatosActionPerformed
                leeTesteaHistoricalRecordsPrediccion lthr = new leeTesteaHistoricalRecordsPrediccion(bundle, engine,nombreFicheroPrevio,salidaTexto,fechaIni,fechaFin,nombreFicheroJTF,
                jDateChooser_t_0,jDateChooser_t_1,jDateChooser_t_F,jDateChooser_t_I,dataDirectory,procesar2,ficheroDatosDisponible,outputWriter,numClasesG2);
                lthr.execute();
    }//GEN-LAST:event_cargarFicheroDatosActionPerformed

    private void seleccionarFicheroDatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionarFicheroDatosActionPerformed
        // TODO add your handling code here:
        String outPut;
        File ff;
        //Pedimos el fichero con la información raw
        JFileChooser jfc = new JFileChooser();
        //jfc.setDialogTitle("Selecciona el fichero que contiene los datos a procesar");
        jfc.setDialogTitle(bundle.getString("mensaje.seleccionaficherodatos"));
        if(lastDirectoryVisited!=null){
            ff= new File(lastDirectoryVisited);
            if(ff.isDirectory())
                jfc.setCurrentDirectory(ff);
        }
        FileFilter filter = new FileNameExtensionFilter(bundle.getString("mensaje.nombreextension"), "csv", "txt");
        jfc.setFileFilter(filter);
        jfc.setAcceptAllFileFilterUsed(false);
        int resultado = jfc.showOpenDialog(this);
        if (resultado == JFileChooser.APPROVE_OPTION) {
            if(jfc.getSelectedFile().exists()){
            lastDirectoryVisited=jfc.getSelectedFile().getParent();
            nombreFicheroPrevio=jfc.getSelectedFile().getAbsolutePath();
            nombreFicheroJTF.setText(nombreFicheroPrevio);
            nombreFicheroJTF.setToolTipText(nombreFicheroPrevio);            
            //salidaTexto.append("\n\nFichero seleccionado para procesar:"+nombreFicheroPrevio);   
            procesar2.setEnabled(false);
            this.ficheroDatosDisponible=false;
            }
            else{ 
                 JOptionPane.showMessageDialog(this, String.format(bundle.getString("error.ficheronoexiste"), jfc.getSelectedFile().getAbsolutePath()));
            }
        }
    }//GEN-LAST:event_seleccionarFicheroDatosActionPerformed

    private void procesar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_procesar2ActionPerformed
        // TODO add your handling code here:
         String outPut=null; 
         int numReplicas;
         int semilla;
         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
         
         if(jDateChooser_t_I.getDate()==null ||jDateChooser_t_F.getDate()==null ||
                 jDateChooser_t_0.getDate()==null ||
                 jDateChooser_t_1.getDate()==null){
             JOptionPane.showMessageDialog(this, bundle.getString("error.fechasnecesarias"));
             return;
         }
         
         salidaTexto.append( String.format(bundle.getString("mensaje.periodoestimacion"),sdf.format(jDateChooser_t_I.getDate()),sdf.format(jDateChooser_t_F.getDate()) ));
         salidaTexto.append( String.format(bundle.getString("mensaje.periodoprediccion"),sdf.format(jDateChooser_t_0.getDate()),sdf.format(jDateChooser_t_1.getDate()) ));
         String freqSer=null;
           int numero=0;
            if (!usarFicheroNewPosPropio) {
                try {
                    freqSer = JOptionPane.showInputDialog(null, bundle.getString("mensaje.parametrofrequencyseries"), 7);
                    numero = Integer.parseInt(freqSer);
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, String.format(bundle.getString("error.paramfreqseries"), freqSer));
                    return ;
                }
            }
            
            
        estimaParametrosYSimulaPrediccion ePPS= new estimaParametrosYSimulaPrediccion(bundle,engine,salidaTexto,jDateChooser_t_0,jDateChooser_t_1,jDateChooser_t_F,
                 jDateChooser_t_I,dataDirectory,procesar2,outputWriter,usarFicheroNewPosPropio,custom_scenario_simple,
                 newOwnPositivesFile,numClasesG2[0],numero,ppa,nombreFicheroPrevio,lastDirectoryVisited,ficheros,semillaJTF,numRepJTF,
                 resTextoButon,resGraphicButon,resTextoButon2,resGraphicButon2);
        ePPS.execute();
        this.dispose();
    }//GEN-LAST:event_procesar2ActionPerformed

    private void cancelar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelar2ActionPerformed
        // TODO add your handling code here:
        if(JOptionPane.showConfirmDialog(this, bundle.getString("mensaje.salirprocesadoficheros"))==JOptionPane.OK_OPTION){
            ppa.setDataDirectory(dataDirectory);
            ppa.setLastDirectoryVisited(lastDirectoryVisited);
            ppa.setLastFileUsed(nombreFicheroPrevio);
//            ppa.setFrom(LocalDate.of(1900+jDateChooser_t_0.getDate().getYear(), jDateChooser_t_0.getDate().getMonth()+1, jDateChooser_t_0.getDate().getDate()));
 //           ppa.setUntil(LocalDate.of(1900+jDateChooser_t_1.getDate().getYear(), jDateChooser_t_1.getDate().getMonth()+1, jDateChooser_t_1.getDate().getDate()));
                this.dispose();
        }
    }//GEN-LAST:event_cancelar2ActionPerformed

    private void positivosExternoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_positivosExternoActionPerformed
        // TODO add your handling code here:
        JCheckBox jcb = (JCheckBox)evt.getSource();
        if(jcb.isSelected())
        {
            FicheroNewPositivos.setEnabled(true);
            seleccionarFicheroNewPositivos.setEnabled(true);
            cargarFicheroNewPositivos.setEnabled(true);
            FicheroNewPositivos.setVisible(true);
            seleccionarFicheroNewPositivos.setVisible(true);
            cargarFicheroNewPositivos.setVisible(true);
            
          //  this.jDateChooser_t_0.setEnabled(false);
            this.jDateChooser_t_1.setEnabled(false);
            this.procesar2.setEnabled(false);
            this.usarFicheroNewPosPropio=true;
        }else{
            FicheroNewPositivos.setEnabled(false);
            seleccionarFicheroNewPositivos.setEnabled(false);
            cargarFicheroNewPositivos.setEnabled(false);
            FicheroNewPositivos.setVisible(false);
            seleccionarFicheroNewPositivos.setVisible(false);
            cargarFicheroNewPositivos.setVisible(false);
          //  jDateChooser_t_0.setEnabled(true);
            jDateChooser_t_1.setEnabled(true);
            if(this.ficheroDatosDisponible==true)
                  this.procesar2.setEnabled(true);
            this.usarFicheroNewPosPropio=false;
        }
    }//GEN-LAST:event_positivosExternoActionPerformed

    private void seleccionarFicheroNewPositivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionarFicheroNewPositivosActionPerformed
        // TODO add your handling code here:
        String outPut;
        File ff;
        //Pedimos el fichero con la información raw
        JFileChooser jfc = new JFileChooser();
        jfc.setDialogTitle(bundle.getString("mensaje.seleccionaficheroproyetados"));
        if(lastDirectoryVisited!=null){
            ff= new File(lastDirectoryVisited);
            if(ff.isDirectory())
                jfc.setCurrentDirectory(ff);
        }
        FileFilter filter = new FileNameExtensionFilter(bundle.getString("mensaje.nombreextension"), "csv", "txt");
        jfc.setFileFilter(filter);
        jfc.setAcceptAllFileFilterUsed(false);
        int resultado = jfc.showOpenDialog(this);
        if (resultado == JFileChooser.APPROVE_OPTION) {
            if(jfc.getSelectedFile().exists()){
            newOwnPositivesFile=jfc.getSelectedFile().getAbsolutePath();
            FicheroNewPositivos.setText(newOwnPositivesFile);
            nombreFicheroJTF.setToolTipText(newOwnPositivesFile);            
            salidaTexto.append(String.format(bundle.getString("mensaje.ficherocargado"),newOwnPositivesFile));   
            procesar2.setEnabled(false);
            }
            else{ 
                JOptionPane.showMessageDialog(this, String.format(bundle.getString("error.ficheronoexiste"),jfc.getSelectedFile().getAbsolutePath()));
                procesar2.setEnabled(false);
            }
        }
    }//GEN-LAST:event_seleccionarFicheroNewPositivosActionPerformed

    
    String leeFicheroNewPositivosSimple(){
        String lineJustFetched;
        StringBuilder resultado = new StringBuilder("c(");
        //Fichero de nuevos positivos de usuario, calculando tamaño
        //###########################
        try ( 
            BufferedReader buf = new BufferedReader(new FileReader(this.newOwnPositivesFile))) {            
            
            while (true) {
                lineJustFetched = buf.readLine();                
                if (lineJustFetched == null)   break;
                resultado.append(lineJustFetched+",");
            }
            buf.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(CargaPacientesYDistribuciones.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(CargaPacientesYDistribuciones.class.getName()).log(Level.SEVERE, null, ex);
        }    
        resultado.setCharAt(resultado.length()-1, ')');
        
    return resultado.toString();
    }
    
    
    private void cargarFicheroNewPositivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarFicheroNewPositivosActionPerformed
        // TODO add your handling code here:
        
        //this.custom_scenario_simple
        int numCampos=-1;   
        String campos[];
        String lineJustFetched;
        lineasNewPosPropio=0;
        
        //Fichero de nuevos positivos de usuario, calculando tamaño
        //###########################
        try ( 
            BufferedReader buf = new BufferedReader(new FileReader(this.newOwnPositivesFile))) {            
            
            while (true) {
                lineJustFetched = buf.readLine();
                if (lineJustFetched == null)   break;
                campos=lineJustFetched.split(",");
                if(numCampos==-1)
                    numCampos=campos.length;
                for(int i=0;i<campos.length;i++){
                  if(Integer.parseInt(campos[i])<0) throw new NumberFormatException();
                      
                }
                
                lineasNewPosPropio++;
            }
            custom_scenario_simple=(numCampos==1);            
            buf.close();
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(CargaPacientesYDistribuciones.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(CargaPacientesYDistribuciones.class.getName()).log(Level.SEVERE, null, ex);
        }    
        catch (NumberFormatException ex) {
               JOptionPane.showMessageDialog(this, bundle.getString("error.cargaficheropropio3"));
               numClasesG2[0]=-1;
               return;
        } 
        if(numCampos!=1 && numCampos!=numClasesG2[0]){
               JOptionPane.showMessageDialog(this, bundle.getString("error.cargaficheropropio2"));
               numClasesG2[0]=-1;
               return;
        }
        procesar2.setEnabled(true);
        //- Comprobamos cuantas días tiene y lo guardamos en lineasNewPosPropio
        //- Situamos el 
        //Hacemos una copia del fichero que han metido al fichero nuevos_positivos_escenario.
       //CON EL NUMERO DE LINEAS Y LA FECHA DE t_0 TENGO QUE ACTUALIZAR MOMENTANEAMENTE t_1
       Calendar cc = Calendar.getInstance();
       cc.setTime(jDateChooser_t_0.getDate());
       cc.add(Calendar.DATE,lineasNewPosPropio-1);
       jDateChooser_t_1.setDate(cc.getTime());
       
    }//GEN-LAST:event_cargarFicheroNewPositivosActionPerformed

    private void jDateChooser_t_IPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateChooser_t_IPropertyChange
        // TODO add your handling code here:
        
        if (jDateChooser_t_I.getDate() != null) {
            Calendar cc = Calendar.getInstance();
            cc.setTime(jDateChooser_t_I.getDate());
            cc.add(Calendar.DATE, 1);
            jDateChooser_t_F.setMinSelectableDate(cc.getTime());

        }
    }//GEN-LAST:event_jDateChooser_t_IPropertyChange

    private void jDateChooser_t_FPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateChooser_t_FPropertyChange
        // TODO add your handling code here:
        if (jDateChooser_t_F.getDate() != null) {
            Calendar cc = Calendar.getInstance();
            cc.setTime(jDateChooser_t_F.getDate());
            cc.add(Calendar.DATE, -1);
            jDateChooser_t_I.setMaxSelectableDate(cc.getTime());
            cc.add(Calendar.DATE, 2);
            jDateChooser_t_0.setMinSelectableDate(cc.getTime());
            jDateChooser_t_0.setDate(cc.getTime());
        }
        
    }//GEN-LAST:event_jDateChooser_t_FPropertyChange

    private void jDateChooser_t_0PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateChooser_t_0PropertyChange
        // TODO add your handling code here:

        //SI CAMBIO ESTO Y TENEMOS CARGADO EL FICHERO DE POSTIVOS PROPIO TENGO QUE ACTUALIZAR t_1 AUTOMATICAMETNE
        if (jDateChooser_t_0.getDate() != null) {
            Calendar cc = Calendar.getInstance();
            cc.setTime(jDateChooser_t_0.getDate());
            cc.add(Calendar.DATE, 1);
            jDateChooser_t_1.setMinSelectableDate(cc.getTime());
            cc.add(Calendar.DATE, -2);
            jDateChooser_t_F.setMaxSelectableDate(cc.getTime());
            jDateChooser_t_F.setDate(cc.getTime());
            if (usarFicheroNewPosPropio && this.newOwnPositivesFile!=null) {
                cc.setTime(jDateChooser_t_0.getDate());
                cc.add(Calendar.DATE, lineasNewPosPropio-1);
                jDateChooser_t_1.setDate(cc.getTime());
            }
        }
    }//GEN-LAST:event_jDateChooser_t_0PropertyChange

    private void jDateChooser_t_1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateChooser_t_1PropertyChange
        // TODO add your handling code here:
        if(jDateChooser_t_1.getDate()!=null){
     //   Calendar cc = Calendar.getInstance();
     //   cc.setTime(jDateChooser_t_1.getDate());
    //   cc.add(Calendar.DATE,-1);
     //   jDateChooser_t_0.setMaxSelectableDate(cc.getTime());
        }
    }//GEN-LAST:event_jDateChooser_t_1PropertyChange

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:        
        Ayuda a = new Ayuda(bundle,Integer.parseInt(bundle.getString("ayuda.caretPosition.forecasting")));
        a.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

   
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField FicheroNewPositivos;
    private javax.swing.JButton cancelar2;
    private javax.swing.JButton cargarFicheroDatos;
    private javax.swing.JButton cargarFicheroNewPositivos;
    private javax.swing.JTextField fechaFin;
    private javax.swing.JTextField fechaIni;
    private javax.swing.JButton jButton1;
    private com.toedter.calendar.JDateChooser jDateChooser_t_0;
    private com.toedter.calendar.JDateChooser jDateChooser_t_1;
    private com.toedter.calendar.JDateChooser jDateChooser_t_F;
    private com.toedter.calendar.JDateChooser jDateChooser_t_I;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField nombreFicheroJTF;
    private javax.swing.JTextField numRepJTF;
    private javax.swing.JCheckBox positivosExterno;
    private javax.swing.JButton procesar2;
    private javax.swing.JButton seleccionarFicheroDatos;
    private javax.swing.JButton seleccionarFicheroNewPositivos;
    private javax.swing.JTextField semillaJTF;
    // End of variables declaration//GEN-END:variables
}
